/* Copyright (C) 2016  Intel Corporation
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * version 2 only, as published by the Free Software Foundation.
 * This file has been designated as subject to the "Classpath"
 * exception as provided in the LICENSE file that accompanied
 * this code.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License version 2 for more details (a copy
 * is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU General Public License
 * version 2 along with this program; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA  02110-1301, USA.
 */

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class lib_persistent_PersistentByteBuffer */

#ifndef _Included_lib_persistent_PersistentByteBuffer
#define _Included_lib_persistent_PersistentByteBuffer
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     lib_persistent_PersistentByteBuffer
 * Method:    nativeReserveByteBufferMemory
 * Signature: (I)J
 */
JNIEXPORT jlong JNICALL Java_lib_persistent_PersistentByteBuffer_nativeReserveByteBufferMemory
  (JNIEnv *, jobject, jint);

/*
 * Class:     lib_persistent_PersistentByteBuffer
 * Method:    nativeGetByteBufferAddress
 * Signature: (Ljava/nio/ByteBuffer;)J
 */
JNIEXPORT jlong JNICALL Java_lib_persistent_PersistentByteBuffer_nativeGetByteBufferAddress
  (JNIEnv *, jobject, jobject);

/*
 * Class:     lib_persistent_PersistentByteBuffer
 * Method:    nativeCreateByteBuffer
 * Signature: (J)Ljava/nio/ByteBuffer;
 */
JNIEXPORT jobject JNICALL Java_lib_persistent_PersistentByteBuffer_nativeCreateByteBuffer
  (JNIEnv *, jobject, jlong);

/*
 * Class:     lib_persistent_PersistentByteBuffer
 * Method:    nativePut
 * Signature: (J[BII)I
 */
JNIEXPORT jint JNICALL Java_lib_persistent_PersistentByteBuffer_nativePut
  (JNIEnv *, jobject, jlong, jbyteArray, jint, jint);

/*
 * Class:     lib_persistent_PersistentByteBuffer
 * Method:    nativePutAbsolute
 * Signature: (J[BII)I
 */
JNIEXPORT jint JNICALL Java_lib_persistent_PersistentByteBuffer_nativePutAbsolute
  (JNIEnv *, jobject, jlong, jbyteArray, jint, jint);

/*
 * Class:     lib_persistent_PersistentByteBuffer
 * Method:    nativePutByteBuffer
 * Signature: (JJ)I
 */
JNIEXPORT jint JNICALL Java_lib_persistent_PersistentByteBuffer_nativePutByteBuffer
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     lib_persistent_PersistentByteBuffer
 * Method:    nativeGet
 * Signature: (J[BII)I
 */
JNIEXPORT jint JNICALL Java_lib_persistent_PersistentByteBuffer_nativeGet
  (JNIEnv *, jobject, jlong, jbyteArray, jint, jint);

/*
 * Class:     lib_persistent_PersistentByteBuffer
 * Method:    nativeGetAbsolute
 * Signature: (J[BII)I
 */
JNIEXPORT jint JNICALL Java_lib_persistent_PersistentByteBuffer_nativeGetAbsolute
  (JNIEnv *, jobject, jlong, jbyteArray, jint, jint);

/*
 * Class:     lib_persistent_PersistentByteBuffer
 * Method:    nativePersistByteBufferState
 * Signature: (J[I)V
 */
JNIEXPORT void JNICALL Java_lib_persistent_PersistentByteBuffer_nativePersistByteBufferState
  (JNIEnv *, jobject, jlong, jintArray);

/*
 * Class:     lib_persistent_PersistentByteBuffer
 * Method:    nativeRetrieveByteBufferState
 * Signature: (J)[I
 */
JNIEXPORT jintArray JNICALL Java_lib_persistent_PersistentByteBuffer_nativeRetrieveByteBufferState
  (JNIEnv *, jclass, jlong);

/*
 * Class:     lib_persistent_PersistentByteBuffer
 * Method:    nativeCheckByteBufferExists
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_lib_persistent_PersistentByteBuffer_nativeCheckByteBufferExists
  (JNIEnv *, jclass, jlong);

/*
 * Class:     lib_persistent_PersistentByteBuffer
 * Method:    nativeDuplicate
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_lib_persistent_PersistentByteBuffer_nativeDuplicate
  (JNIEnv *, jobject, jlong);

/*
 * Class:     lib_persistent_PersistentByteBuffer
 * Method:    nativeSlice
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_lib_persistent_PersistentByteBuffer_nativeSlice
  (JNIEnv *, jobject, jlong);

/*
 * Class:     lib_persistent_PersistentByteBuffer
 * Method:    nativeRemaining
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_lib_persistent_PersistentByteBuffer_nativeRemaining
  (JNIEnv *, jobject, jlong);

/*
 * Class:     lib_persistent_PersistentByteBuffer
 * Method:    nativeReset
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_lib_persistent_PersistentByteBuffer_nativeReset
  (JNIEnv *, jobject, jlong);

/*
 * Class:     lib_persistent_PersistentByteBuffer
 * Method:    nativeHashCode
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_lib_persistent_PersistentByteBuffer_nativeHashCode
  (JNIEnv *, jobject, jlong);

/*
 * Class:     lib_persistent_PersistentByteBuffer
 * Method:    nativeCompareTo
 * Signature: (JJ)I
 */
JNIEXPORT jint JNICALL Java_lib_persistent_PersistentByteBuffer_nativeCompareTo
  (JNIEnv *, jobject, jlong, jlong);

#ifdef __cplusplus
}
#endif
#endif
